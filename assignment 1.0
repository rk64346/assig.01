{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1d11a96f-481c-43c2-afa1-26e5e9ddffcf",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Q1-create one variable contaning following type of data ?\n",
    "#(i)string\n",
    "#(ii)list\n",
    "#(iii)float\n",
    "#(iv)tuple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cc6a7f83-10c9-4737-88b1-884fe286985e",
   "metadata": {},
   "outputs": [],
   "source": [
    "l = \"rohit kumar\" ## this aexample of string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bd289833-f9cf-44e6-ad46-f81674f541f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'rohit kumar'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b07e5039-6900-4e35-86b3-32e0233620ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "l1 =[1,2,3,4,5,6,7,8,True,False,55.66,\"rohit\"] ## this an example of list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ae7005b1-30b5-4d4d-b783-797bfe71b868",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5, 6, 7, 8, True, False, 55.66, 'rohit']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bb739b7c-dad1-4682-b4f1-602f5f07f573",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 55.66"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "899d0888-287d-4ad0-979e-3639683a6889",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0e32123d-f336-42c4-95ca-7a49eef6e910",
   "metadata": {},
   "outputs": [],
   "source": [
    "b = ('pwskills', 'python','rohit') ## example of tuple"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c62b9e3b-a5dd-4932-b905-5bbb8e77629c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tuple"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1343937e-bde3-407c-9192-0e3a3a420a1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q2- Given are some following variable contaning data:\n",
    "#(i)Var1 = ''\n",
    "#(ii)Var2 = '[DS,ML,Python]'\n",
    "#(iii)Var3 =['DS','ML','Python']\n",
    "#(iv)Var4 = 1.\n",
    "## Wat will be the data type of the above given variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fe6a1847-0060-49a7-9394-3f825faf5b8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "Var1 = ''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f87118e2-ee6d-4ae6-b3fc-fe33b5275949",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "80e2d768-818a-414b-85b5-e2f1c6b4a102",
   "metadata": {},
   "outputs": [],
   "source": [
    "Var2 = '[DS,ML,Python]'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dcf43806-4135-440f-acee-1f837456ef64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type('[DS,ML,Python]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0e65f93d-b7c0-4dd3-a96d-c7c07584c60d",
   "metadata": {},
   "outputs": [],
   "source": [
    "Var3 = ['DS','ML','Python']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9f9c2d2d-eb84-47e5-9271-2d55541837ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(['DS','ML','Python'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ec079c3f-9e19-41d7-ac92-3de767ed1a04",
   "metadata": {},
   "outputs": [],
   "source": [
    "Var4 =1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "41a112e2-9d3d-4375-9abd-47f7dee3708e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "int"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ed737f96-c62e-4384-be00-b5874eb147bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Q3- Explain yhe uses of the following operators using an example:\n",
    "#(i)/\n",
    "#(ii)%\n",
    "#(iii)//\n",
    "#(iv)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "731e08a1-66a3-4d5d-8c0d-948f228e80e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8333333333333334"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "5/6 # it is adivision function help to devide int. in python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c6179634-69ce-4874-b120-191aea34e646",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "10%55 # it is apercentage function ,give the desiered percent of desired no.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6f7035f0-4ea0-460b-af22-e301518b84fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "100//55"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d184cbe5-35f8-48c5-a6b4-5f2ded569c05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "275"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "55*5# it is help to multiply two digit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "5c47c92f-d1e3-4f64-9928-567607f41ce0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3025"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "55**2# multiply the no.in 2x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "04e03f95-512f-4e78-8e25-332d24d44e1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q4 - CREATE A LIST OF LENGTH 10 OF YOUR CHOICE CONTANING MULTIPLE TYPE OF DATA.USING FOR LOOP PRINT THE ELEMENT AND IT'S DATA TYPE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c63bb69f-679e-44ba-ad78-420c7bb59a36",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_list = [1,2,3,4,5,True,False,55.66,\"rohit\",'!']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "898b66da-6d8e-4d9b-9cb4-c66fe1867b21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'int'>\n",
      "<class 'int'>\n",
      "<class 'int'>\n",
      "<class 'int'>\n",
      "<class 'int'>\n",
      "<class 'bool'>\n",
      "<class 'bool'>\n",
      "<class 'float'>\n",
      "<class 'str'>\n",
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "for i in my_list:\n",
    "    print(type(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "45c7a82e-a67d-4094-8cdb-4f15e6f3c876",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q5- using a while loop. verify the number A is purely divisible by number B and if so then how many times it can be divisible."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "fb61f173-d3b3-44c0-b6bc-c78042ef0387",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "argument of type 'int' is not iterable",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[30], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m a\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[1;32m      2\u001b[0m b \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m6\u001b[39m\n\u001b[0;32m----> 3\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[43mi\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43ma\u001b[49m:\n\u001b[1;32m      4\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124ma\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;241m/\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mb\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[0;31mTypeError\u001b[0m: argument of type 'int' is not iterable"
     ]
    }
   ],
   "source": [
    "a= 5\n",
    "b = 6\n",
    "while i in a:\n",
    "    print('a'/'b')\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "90014dab-e12a-4775-a866-eed7d513d15a",
   "metadata": {},
   "outputs": [],
   "source": [
    "##Q6- create a list contaning 25 int. data. using for loop if else condition print if the element is divisible by 3 or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7fc9e463-32eb-4a81-aea6-449a1f4e299e",
   "metadata": {},
   "outputs": [],
   "source": [
    "my_list1 = [1,2,3,4,5,6,7,8,9,0,55,65,66,56,11,22,33,44,55,66,77,88,99,76,45]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f96bd096-dc55-4e1f-b7d9-e4a5bea31184",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(my_list1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "30b92969-3063-408f-aa6b-0f96c4644e98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1,\n",
       " 2,\n",
       " 3,\n",
       " 4,\n",
       " 5,\n",
       " 6,\n",
       " 7,\n",
       " 8,\n",
       " 9,\n",
       " 0,\n",
       " 55,\n",
       " 65,\n",
       " 66,\n",
       " 56,\n",
       " 11,\n",
       " 22,\n",
       " 33,\n",
       " 44,\n",
       " 55,\n",
       " 66,\n",
       " 77,\n",
       " 88,\n",
       " 99,\n",
       " 76,\n",
       " 45]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_list1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "dd8354db-1d0e-4da1-a74e-98fbda0f2b82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3333333333333333\n",
      "0.6666666666666666\n",
      "1.0\n",
      "1.3333333333333333\n",
      "1.6666666666666667\n",
      "2.0\n",
      "2.3333333333333335\n",
      "2.6666666666666665\n",
      "3.0\n",
      "0.0\n",
      "18.333333333333332\n",
      "21.666666666666668\n",
      "22.0\n",
      "18.666666666666668\n",
      "3.6666666666666665\n",
      "7.333333333333333\n",
      "11.0\n",
      "14.666666666666666\n",
      "18.333333333333332\n",
      "22.0\n",
      "25.666666666666668\n",
      "29.333333333333332\n",
      "33.0\n",
      "25.333333333333332\n",
      "15.0\n"
     ]
    }
   ],
   "source": [
    "for i in my_list1:\n",
    "    print(i/3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "93ed4d5d-9765-4948-b267-4e0d292ac21e",
   "metadata": {},
   "outputs": [],
   "source": [
    "##Q7 WHAT DO YOU UNDERSTAND ABOUT MUTABLE AND IMMUTABLE DATA TYPE? GIVE EXAMPLEFOR BOTH SHOWING THIS PROPERTY."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "1cc551c1-3a3e-4d96-a349-061320397605",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"Mutable data type are those data type which allow itself to mutaTE OR change for ex:list, dictonary, setand immutable data type are those data type which dosn't change and produce erroe while changing it\""
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"Mutable data type are those data type which allow itself to mutaTE OR change for ex:list, dictonary, setand immutable data type are those data type which dosn't change and produce erroe while changing it\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b42d2b52-2238-4e67-86e9-142e04975598",
   "metadata": {},
   "outputs": [],
   "source": [
    "#mutable data type\n",
    "my_list = [1,2,3,4]\n",
    "my_list.append(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9649164f-4c2f-4dfa-90c5-1262b62f8ff3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "print(my_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "86388d62-e8df-4d6a-80b3-f398bddd2e81",
   "metadata": {},
   "outputs": [],
   "source": [
    "# immutable data type\n",
    "# careate a string\n",
    "my_str =\"rohit\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c8db646-06c4-4c01-8dec-ab57a331a88b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#chane the value of string\n",
    "my_str =\"golu\""
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
